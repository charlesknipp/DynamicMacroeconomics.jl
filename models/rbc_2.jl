using DynamicMacroeconomics

@simple function households(K, L, w, œÜ, Œ¥, Œ≥, œÉ)
    C = (w / œÜ / L ^ (1 / œÉ)) ^ Œ≥
    I = K - (1 - Œ¥) * lag(K)
    return C, I
end

@simple function firms(K, L, Z, Œ±, Œ¥)
    r = Œ± * Z * (lag(K) / L) ^ (Œ± - 1) - Œ¥
    w = (1 - Œ±) * Z * (lag(K) / L) ^ Œ±
    Y = Z * lag(K) ^ Œ± * L ^ (Œ± - 1)
    return r, w, Y
end

@simple function market_clearing(C, I, K, L, Y, r, w, Œ≤, Œ≥)
    goods_mkt = Y - C - I
    euler = C ^ (-1 / Œ≥) - Œ≤ * (1 + lead(r)) * lead(C) ^ (-1 / Œ≥)
    walras = C + K - (1 + r) * lag(K) - w * L
    return goods_mkt, euler, walras
end

# make an RBC model and solve its steady state
rbc_model = model(households, firms, market_clearing, name="rbc")
ss = solve(
    rbc_model,
    (L=1.00, œÉ=1.00, Œ≥=1.00, Œ¥=0.025, Œ±=0.11),
    (œÜ=0.90, Œ≤=0.99, K=2.00, Z=1.00),
    (goods_mkt=0.00, r=0.01, euler=0.00, Y=1.00)
)

## JACOBIAN DICTS ##########################################################################

# jacobians of simple blocks are sparse by default
ùí•1 = jacobian(firms, ss, (:K, :L, :Z))
ùí•2 = jacobian(households, ss, (:K, :L, :w))
ùí•3 = jacobian(market_clearing, ss, (:C, :I, :K, :L, :Y, :r, :w))
