using DynamicMacroeconomics

@simple function households(C, K, Z, Œ±, Œ≤, Œ≥, Œ¥)
    euler = (C ^ -Œ≥) - (Œ≤ * (Œ± * lead(Z) * K ^ (Œ± - 1) + 1 - Œ¥) * (lead(C) ^ -Œ≥))
    return euler
end

@simple function firms(Z, K, C, Œ±, Œ¥)
    walras = (Z * lag(K) ^ Œ± - C) + (1 - Œ¥) * lag(K) - K
    return walras
end

@simple function shocks(Z, œÅ, Œµ)
    shock_res = log(Z) - œÅ * log(lag(Z)) - Œµ
    return shock_res
end

# make an RBC model and solve its steady state
rbc_model = model(households, firms, shocks, name="rbc")
ss = solve(
    rbc_model,
    (Œ≥=1.00, Œ±=0.30, Œ¥=0.25, Œ≤=(1/1.05), œÅ=0.80, Œµ=0.00),
    (C=1.00, K=0.40, Z=0.40),
    (euler=0.00, walras=0.00, shock_res=0.00)
)

## JACOBIAN DICTS ##########################################################################

# jacobians of simple blocks are sparse by default
ùí•1 = jacobian(households, ss, (:C, :K, :Z))
ùí•2 = jacobian(firms, ss, (:C, :K, :Z))
ùí•3 = jacobian(shocks, ss, (:Z, ))
